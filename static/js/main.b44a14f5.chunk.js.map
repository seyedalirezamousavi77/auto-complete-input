{"version":3,"sources":["myHook/useDebounce.js","view/Main/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["useDebounce","value","delay","setIsSearching","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","override","css","Main","searchTerm","setSearchTerm","results","setResults","isSearching","all","debouncedSearchTerm","length","filter","item","startsWith","handleAutoComplete","e","preventDefault","target","innerHTML","Container","fluid","className","onChange","autoComplete","map","result","index","key","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAsBeA,MApBf,SAAqBC,EAAOC,EAAQC,GAAiB,IAAD,EAEJC,mBAASH,GAFL,mBAEzCI,EAFyC,KAEzBC,EAFyB,KAkBhD,OAdAC,qBACE,WACE,IAAMC,EAAUC,YAAW,WACzBH,EAAkBL,KACjBC,GAGH,OAFAC,GAAe,GAER,WACLO,aAAaF,MAGjB,CAACP,EAAOC,IAGHG,G,0TCZX,IAAMM,EAAWC,cAAH,KA6ECC,MAhEf,WAAiB,IAAD,EAEwBT,mBAAS,IAFjC,mBAELU,EAFK,KAEOC,EAFP,OAGkBX,mBAAS,IAH3B,mBAGLY,EAHK,KAGIC,EAHJ,OAI0Bb,oBAAS,GAJnC,mBAILc,EAJK,KAIQf,EAJR,OAKUC,mBAAS,CAAC,MAAO,UAAW,UAAW,MAAO,WAAY,eAAgB,WALpF,mBAKLe,EALK,KAMNC,GANM,KAMgBpB,EAAYc,EAAY,IAAMX,IAE1DI,qBACI,WACIJ,GAAe,GACfc,EAAW,IACPH,EAAWO,OAAS,EACpBJ,EAAWE,EAAIG,QAAO,SAAAC,GAAI,OAAIA,EAAKC,WAAWV,OAE9CG,EAAW,MAGnB,CAACG,IAGL,IAAMK,EAAqB,SAACC,GACxBA,EAAEC,iBACFZ,EAAcW,EAAEE,OAAOC,YAE3B,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,yBAEvB,wBAAIA,UAAU,0BAAd,yBAGA,2BACIA,UAAU,2DACVC,SAAU,SAAAP,GAAC,OAAIX,EAAcW,EAAEE,OAAO3B,QACtCiC,aAAa,OACbjC,MAAOa,IAGPA,EAAWO,OAAS,EAChB,oCACKH,GAAe,6BACZ,kBAAC,aAAD,CACIN,IAAKD,KAGb,yBAAKqB,UAAU,+CAEPhB,EAAQmB,KAAI,SAACC,EAASC,GAAV,OACR,yBAAKC,IAAKD,GACN,wBAAIL,UAAU,YAAYO,QAASd,GAAqBW,SAM5E,wBAAKJ,UAAU,+CAAf,uD,MChELQ,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCKcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b44a14f5.chunk.js","sourcesContent":["import react,{useState , useEffect} from 'react'\r\n\r\nfunction useDebounce(value, delay , setIsSearching) {\r\n\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n  \r\n    useEffect(\r\n      () => {\r\n        const handler = setTimeout(() => {\r\n          setDebouncedValue(value);\r\n        }, delay);\r\n        setIsSearching(true)\r\n        \r\n        return () => {\r\n          clearTimeout(handler);\r\n        };\r\n      },\r\n      [value, delay] \r\n    );\r\n  \r\n    return debouncedValue;\r\n}\r\nexport default useDebounce;","import React, { useState, useEffect } from 'react';\r\nimport useDebounce from '../../myHook/useDebounce'\r\nimport './Main.css'\r\n\r\nimport { css } from \"@emotion/core\";\r\nimport { ClipLoader } from \"react-spinners\";\r\nimport { Container } from 'react-bootstrap';\r\n\r\nconst override = css`\r\n  position: absolute;\r\n  top:8.75rem;\r\n  right:25.5%;\r\n  display: block;\r\n  width:2rem;\r\n  height:2rem;\r\n  margin: 0 auto;\r\n  border: .35rem solid;\r\n  border-color: #00fff0;\r\n  border-bottom-color: transparent;\r\n`;\r\n\r\nfunction Main() {\r\n\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [results, setResults] = useState([]);\r\n    const [isSearching, setIsSearching] = useState(false);\r\n    const [all, setAll] = useState(['ali', 'alireza', 'aliReza', 'Ali', 'mohammad', 'mohammadReza', 'mohsen'])\r\n    const debouncedSearchTerm = useDebounce(searchTerm, 3000, setIsSearching);\r\n\r\n    useEffect(\r\n        () => {\r\n            setIsSearching(false);\r\n            setResults([])\r\n            if (searchTerm.length > 2) {\r\n                setResults(all.filter(item => item.startsWith(searchTerm)));\r\n            } else {\r\n                setResults([]);\r\n            }\r\n        },\r\n        [debouncedSearchTerm]\r\n    );\r\n\r\n    const handleAutoComplete = (e) =>{\r\n        e.preventDefault();\r\n        setSearchTerm(e.target.innerHTML)\r\n    }\r\n    return (\r\n        <Container fluid className=\"px-0 mx-0 bg-img pt-5\">\r\n\r\n            <h2 className=\"text-center text-light\">\r\n                please enter the name\r\n            </h2>\r\n            <input\r\n                className=\"w-50 mx-auto mt-5 d-flex justify-content-center my-input\"\r\n                onChange={e => setSearchTerm(e.target.value)}\r\n                autoComplete=\"true\"\r\n                value={searchTerm}\r\n            />\r\n            {\r\n                searchTerm.length > 2 ?\r\n                    <>\r\n                        {isSearching && <div>\r\n                            <ClipLoader\r\n                                css={override}\r\n                            />\r\n                        </div>}\r\n                        <div className=\"w-50 mx-auto text-white pl-3 mt-3 bg-result\">\r\n                            {\r\n                                results.map((result , index) => (\r\n                                    <div key={index}>\r\n                                        <h4 className=\"w-50 mt-2\" onClick={handleAutoComplete}>{result}</h4>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </> :\r\n                    <h2  className=\"w-50 mx-auto text-white pl-3 mt-3 bg-result\">\r\n                        you should enter 3 charactor for see autocomplete\r\n                    </h2>\r\n                } \r\n                \r\n            \r\n        </Container >\r\n    );\r\n}\r\nexport default Main","import React from 'react';\nimport Main from './view/Main/Main'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}